/*
 * Copyright © 2018 Alain Kägi
 */

package ldbc.queries;

import com.ldbc.driver.workloads.ldbc.snb.interactive.LdbcQuery11Result;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import ldbc.utils.Explanation;
import ldbc.utils.LdbcUtils;

/**
 * The Query11 class implements an application that runs complex read
 * query 11 from the LDBC Social Network Benchmark (SNB) as a
 * microbenchmark.  As input, it expects a parameter substitution
 * parameter file as generated by the LDBC SNB data generator.
 */
public class Query11 implements ExecutableQuery {

    /* Static query parameters. */
    private static final String queryName = "Query11";
    private static final String queryParameterFilename = "query_11_param.txt";
    private static final String queryParameterFileLinePattern = "(\\d+)\\|(.+)\\|(\\d+)";
    private static final int queryLimit = 10;
    // Friends and their jobs.
    // Parameter 1: person identifier
    // Parameter 2: person identifier (same as parameter 1)
    // Parameter 3: year
    // Parameter 4: country name
    // Parameter 5: limit on the number of results
    private static final String queryString =
        "   SELECT Friend.id, " +
        "          Person.firstName, " +
        "          Person.lastName, " +
        "          Organisation.name, " +
        "          PersonWorkAtOrganisation.workFrom " +
        "     FROM (SELECT PersonKnowsPerson.person2Id AS id " +
        "             FROM PersonKnowsPerson " +
        "            WHERE PersonKnowsPerson.person1Id = ? " +
        "            UNION " +
        "           SELECT K2.person2Id AS id " +
        "             FROM PersonKnowsPerson AS K1, " +
        "                  PersonKnowsPerson AS K2 " +
        "            WHERE K1.person1Id = ? " +
        "              AND K2.person1Id = K1.person2Id " +
        "          ) AS Friend, " +
        "          PersonWorkAtOrganisation, " +
        "          Place, " +
        "          Person, " +
        "          Organisation, " +
        "          OrganisationIsLocatedInPlace " +
        "    WHERE PersonWorkAtOrganisation.personId = Friend.id " +
        "      AND PersonWorkAtOrganisation.workFrom < ? " +
        "      AND Organisation.id = PersonWorkAtOrganisation.organisationId " +
        "      AND OrganisationIsLocatedInPlace.organisationId = PersonWorkAtOrganisation.organisationId " +
        "      AND OrganisationIsLocatedInPlace.placeId = Place.id " +
        "      AND Person.id = Friend.id " +
        "      AND Place.name = ? " +
        " ORDER BY PersonWorkAtOrganisation.workFrom, " +
        "          Friend.id, " +
        "          Organisation.name DESC " +
        "    LIMIT ?";

    /** A minimal constructor. */
    private Query11() {}

    /**
     * Run LDBC SNB complex read query 11 as a microbenchmark.
     *
     * <p>A configuration file called <tt>params.ini</tt> specifies
     * the running parameters.
     *
     * @param args  Unused
     */
    public static void main(String[] args) {
        Microbenchmark.executeQueryWithParametersFromFile(new Query11(), queryName, queryParameterFilename, queryParameterFileLinePattern);
    }

    /**
     * Job referral (11th complex read query).
     * @param db        A database handle
     * @param personId  The person's unique identifier
     * @param country   A country's name
     * @param year      A year
     * @param limit     An upper bound on the number of results returned
     * @return the top 'limit' friends of the given person who started at some company in the given country before the given year
     * @throws SQLException if a database access error occurs
     */
    public static List<LdbcQuery11Result> query(Connection db, long personId, String country, int year, int limit) throws SQLException {

        List<LdbcQuery11Result> results = new ArrayList<>();

        PreparedStatement s = db.prepareStatement(queryString);
        s.setLong(1, personId);
        s.setLong(2, personId);
        s.setInt(3, year);
        s.setString(4, country);
        s.setInt(5, limit);
        ResultSet r = s.executeQuery();
        while (r.next()) {
            LdbcQuery11Result result = new LdbcQuery11Result(
                r.getLong("Friend.id"),
                r.getString("Person.firstName"),
                r.getString("Person.lastName"),
                r.getString("Organisation.name"),
                r.getInt("PersonWorkAtOrganisation.workFrom"));
                results.add(result);
        }

        return results;
    }

    /**
     * Explain the main query for the given inputs.
     * @param db        A database handle
     * @param personId  The person's unique identifier
     * @param country   A country's name
     * @param year      A year
     * @param limit     An upper bound on the number of results returned
     * @return the top 'limit' friends of the given person with the given first name
     * @throws SQLException if a database access error occurs
     */
    private static ResultSet explain(Connection db, long personId, String country, int year, int limit) throws SQLException {
        PreparedStatement s = db.prepareStatement(Explanation.query + queryString);
        s.setLong(1, personId);
        s.setLong(2, personId);
        s.setInt(3, year);
        s.setString(4, country);
        s.setInt(5, limit);
        return s.executeQuery();
    }

    /**
     * Execute the query once for every query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @param beVerbose        Print query outputs if true
     * @param printHeapUsage   Print heap usage if true
     * @throws SQLException if a database access error occurs
     */
    public void executeQuery(Connection db, QueryParameterFile queryParameters, boolean beVerbose, boolean printHeapUsage) throws SQLException {
        HeapUsage heapUsage = new HeapUsage();

        while (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            String country = queryParameters.getString();
            int year = queryParameters.getInt();

            if (printHeapUsage)
                heapUsage.print(System.out);

            List<LdbcQuery11Result> results = query(db, personId, country, year, queryLimit);

            if (beVerbose)
                print(personId, country, year, results);
       }
    }

    /**
     * Explain the query with the first set of query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @throws SQLException if a database access error occurs
     */
    public void explainQuery(Connection db, QueryParameterFile queryParameters) throws SQLException {
        if (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            String country = queryParameters.getString();
            int year = queryParameters.getInt();

            ResultSet r = explain(db, personId, country, year, queryLimit);

            ldbc.utils.Explanation.print(System.out, r);
        }
    }

    /**
     * Pretty print the query 11 results.
     * @param personId   Query 11 parameter 1
     * @param country    Query 11 parameter 2
     * @param year       Query 11 parameter 3
     * @param results    Query 11 results
     */
    private static void print(long personId, String country, int year, List<LdbcQuery11Result> results) {
        System.out.println(personId + " " + country + " " + year);

        if (results.size() == 0) {
            System.out.println("  no matches");
            System.out.println("");
            return;
        }

        for (LdbcQuery11Result result : results) {
            System.out.println("  " + result.personId()
                               + ", " + result.personFirstName()
                               + " " + result.personLastName()
                               + ", " + result.organizationName()
                               + ", " + result.organizationWorkFromYear());
        }

        System.out.println("");
    }

}
