/*
 * Copyright © 2018-2019 Alain Kägi
 */

package ldbc.queries;

import com.ldbc.driver.workloads.ldbc.snb.interactive.LdbcQuery5Result;

import com.zaxxer.hikari.HikariDataSource;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.TimeZone;

import java.text.SimpleDateFormat;

import ldbc.helpers.Query5SortResult;

import ldbc.utils.Explanation;
import ldbc.utils.LdbcUtils;

/**
 * The Query5 class implements an application that runs complex read
 * query 5 from the LDBC Social Network Benchmark (SNB) as a
 * microbenchmark.  As input, it expects a parameter substitution
 * parameter file as generated by the LDBC SNB data generator.
 */
public class Query5 implements ExecutableQuery {

    /* Static query parameters. */
    private static final String queryName = "Query5";
    private static final String queryParameterFilename = "interactive_5_param.txt";
    private static final String queryParameterFileLinePattern = "(\\d+)\\|(\\d+)";
    private static final int queryLimit = 20;
    // Messages created by friends and friends of friends who joined
    // their forums after the given date.
    // Parameter 1: person identifier
    // Parameter 2: person identifier (same as parameter 1)
    // Parameter 3: person identifier (same as parameter 1)
    // Parameter 4: date
    private static String queryString =
        "   SELECT ForumHasMemberPerson.forumId, " +
        "          ForumContainerOfPost.postId " +
        "     FROM (SELECT PersonKnowsPerson.person2Id AS id " +
        "             FROM PersonKnowsPerson " +
        "            WHERE PersonKnowsPerson.person1Id = ? " +
        "            UNION " +
        "           SELECT K2.person2Id AS id " +
        "             FROM PersonKnowsPerson AS K1, " +
        "                  PersonKnowsPerson AS K2 " +
        "            WHERE K1.person1Id = ?  " +
        "              AND K2.person1Id = K1.person2Id " +
        "              AND K2.person2Id <> ? " +
        "          ) AS Friend, " +
        "          ForumHasMemberPerson, " +
        "          ForumContainerOfPost, " +
        "          MessageHasCreatorPerson " +
        "    WHERE ForumHasMemberPerson.personId = Friend.id " +
        "      AND ForumHasMemberPerson.joinDate > ? " +
        "      AND ForumContainerOfPost.forumId = ForumHasMemberPerson.forumId " +
        "      AND MessageHasCreatorPerson.personId = Friend.id " +
        "      AND ForumContainerOfPost.postId = MessageHasCreatorPerson.messageId";
    // Subset of the previous, main query: Forums joined by friends
    // and friends of friends after the given date.
    // Parameter 1: person identifier
    // Parameter 2: person identifier (same as parameter 1)
    // Parameter 3: person identifier (same as parameter 1)
    // Parameter 4: date
    private static String subordinateQueryString =
        "   SELECT ForumHasMemberPerson.forumId " +
        "     FROM (SELECT PersonKnowsPerson.person2Id AS id " +
        "             FROM PersonKnowsPerson " +
        "            WHERE PersonKnowsPerson.person1Id = ? " +
        "            UNION " +
        "           SELECT K2.person2Id AS id " +
        "             FROM PersonKnowsPerson AS K1, " +
        "                  PersonKnowsPerson AS K2 " +
        "            WHERE K1.person1Id = ?  " +
        "              AND K2.person1Id = K1.person2Id " +
        "              AND K2.person2Id <> ? " +
        "          ) AS Friend, " +
        "          ForumHasMemberPerson " +
        "    WHERE ForumHasMemberPerson.personId = Friend.id " +
        "      AND ForumHasMemberPerson.joinDate > ?";

    /** A minimal constructor. */
    private Query5() {}

    /**
     * Run LDBC SNB complex read query 5 as a microbenchmark.
     *
     * <p>A configuration file called <tt>params.ini</tt> specifies
     * the running parameters.
     *
     * @param args  Unused
     */
    public static void main(String[] args) {
        Microbenchmark.executeQueryWithParametersFromFile(new Query5(), queryName, queryParameterFilename, queryParameterFileLinePattern);
    }

    /**
     * New groups (fifth complex read query).
     * @param ds        A data source
     * @param personId  The person's unique identifier
     * @param date      The date (number of milliseconds since beginning of epoch)
     * @param limit     The upper bound on the number of results returned
     * @return the top 'limit' forums joined by friends of the given person after the given date
     * @throws SQLException if a database access error occurs
     */
    public static List<LdbcQuery5Result> query(HikariDataSource ds, long personId, long date, int limit) throws SQLException {
        List<LdbcQuery5Result> results = new ArrayList<>();

        ResultSet r = null;

        try (Connection c = ds.getConnection();
             PreparedStatement s1 = c.prepareStatement(subordinateQueryString);
             PreparedStatement s2 = c.prepareStatement(queryString)) {
            // Number of posts in a given forum.
            Map<Long, Integer> counts = new HashMap<>();

            // Identify all the forums joined after the given date by
            // friends of the start person.  Reset the counts of all
            // these forums to zero.
            s1.setLong(1, personId);
            s1.setLong(2, personId);
            s1.setLong(3, personId);
            s1.setLong(4, date);
            r = s1.executeQuery();
            while (r.next())
                counts.put(r.getLong("ForumHasMemberPerson.forumId"), 0);
            r.close();

            // The main query returns all the posts in the forums
            // identified in the previous loop created by friends of
            // the start person.  Count those posts.
            s2.setLong(1, personId);
            s2.setLong(2, personId);
            s2.setLong(3, personId);
            s2.setLong(4, date);
            r = s2.executeQuery();
            while (r.next()) {
                long forumId = r.getLong("ForumHasMemberPerson.forumId");
                // ignore r.getLong("ForumContainerOfPost.postId")
                counts.put(forumId, counts.get(forumId) + 1);
            }

            // Iterate over all counts, add them to the priority
            // queue, and eliminate overflow entries.
            //
            // To do so, create a priority queue to keep the results
            // sorted and limited to at most the requested 'limit'
            // entries.  To make this work, we inverse the sort order
            // so we know it is safe to remove the entry with the
            // "highest" priority when the queue reaches 'limit + 1'
            // elements.
            Queue<Query5SortResult> queue = new PriorityQueue<>(limit + 1);
            for (Map.Entry<Long, Integer> entry : counts.entrySet()) {
                Query5SortResult e = new Query5SortResult(
                    entry.getKey(),
                    entry.getValue());

                queue.add(e);

                // Eliminate the 'highest' priority entry if we have
                // reached the target number of results.
                Query5SortResult ignore;
                if (queue.size() > limit)
                    ignore = queue.poll();
            }

            // Add elements to the final result array in reverse order.
            while (queue.size() != 0) {
                Query5SortResult e = queue.poll(); // Dequeue.
                LdbcQuery5Result result = new LdbcQuery5Result(
                    LdbcUtils.getForumTitle(c, e.forumId()),
                    e.count());
                results.add(0, result); // Add at the front.
            }

            c.commit();
        } finally {
            if (r != null) r.close();
        }

        return results;
    }

    /**
     * Explain query 5 with the given inputs.
     * @param db        A database handle
     * @param personId  The person's unique identifier
     * @param date      A date (milliseconds since the start of the epoch)
     * @param limit     An upper bound on the number of results returned
     * @return information about the query execution plan
     * @throws SQLException if a database access error occurs
     */
    private static ResultSet explain(HikariDataSource db, long personId, long date, int limit) throws SQLException {
        Connection c = db.getConnection();
        PreparedStatement s = c.prepareStatement(Explanation.query + queryString);
        s.setLong(1, personId);
        s.setLong(2, personId);
        s.setLong(3, personId);
        s.setLong(4, date);
        return s.executeQuery();
    }

    /**
     * Execute the query once for every query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @param beVerbose        Print query outputs if true
     * @param printHeapUsage   Print heap usage if true
     * @throws SQLException if a database access error occurs
     */
    public void executeQuery(HikariDataSource db, QueryParameterFile queryParameters, boolean beVerbose, boolean printHeapUsage) throws SQLException {
        HeapUsage heapUsage = new HeapUsage();

        while (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            long date = queryParameters.getLong();

            if (printHeapUsage)
                heapUsage.print(System.out);

            List<LdbcQuery5Result> results = query(db, personId, date, queryLimit);

            if (beVerbose)
                print(personId, date, results);
       }
    }

    /**
     * Explain the query with the first set of query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @throws SQLException if a database access error occurs
     */
    public void explainQuery(HikariDataSource db, QueryParameterFile queryParameters) throws SQLException {
        if (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            long date = queryParameters.getLong();

            ResultSet r = explain(db, personId, date, queryLimit);

            ldbc.utils.Explanation.print(System.out, r);
        }
    }

    /**
     * Pretty print the query 5 results.
     * @param personId  Query 5 parameter 1
     * @param date      Query 5 parameter 2
     * @param results   Query 5 results
     */
    private static void print(long personId, long date, List<LdbcQuery5Result> results) {
        SimpleDateFormat dateTimeFmt = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
        dateTimeFmt.setTimeZone(TimeZone.getTimeZone("UTC"));
        System.out.println(personId + " " + dateTimeFmt.format(date));

        if (results.size() == 0) {
            System.out.println("  no matches");
            System.out.println("");
            return;
        }

        for (LdbcQuery5Result result : results)
            System.out.println("  " + result.forumTitle()
                               + " " + result.postCount());
        System.out.println("");
    }

}
