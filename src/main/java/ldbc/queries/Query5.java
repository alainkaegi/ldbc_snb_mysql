/*
 * Copyright © 2018 Alain Kägi
 */

package ldbc.queries;

import com.ldbc.driver.workloads.ldbc.snb.interactive.LdbcQuery5Result;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import java.text.SimpleDateFormat;

import ldbc.utils.Explanation;
import ldbc.utils.LdbcUtils;

/**
 * The Query5 class implements an application that runs complex read
 * query 5 from the LDBC Social Network Benchmark (SNB) as a
 * microbenchmark.  As input, it expects a parameter substitution
 * parameter file as generated by the LDBC SNB data generator.
 */
public class Query5 implements ExecutableQuery {

    /* Static query parameters. */
    private static final String queryName = "Query5";
    private static final String queryParameterFilename = "query_5_param.txt";
    private static final String queryParameterFileLinePattern = "(\\d+)\\|(\\d+)";
    private static final int queryLimit = 20;
    // Messages created by friends and friends of friends who joined
    // their forums after the given date.
    // Parameter 1: person identifier
    // Parameter 2: date
    // Parameter 3: person identifier (same as parameter 1)
    // Parameter 4: person identifier (same as parameter 1)
    // Parameter 5: date (same as parameter 2)
    // Parameter 6: an upper bound on the number of results returned
    private static String queryString =
        "   SELECT Forum.title, " +
        "          T.count " +
        "     FROM (  SELECT U.forumId, " +
        "                    COUNT(*) AS count " +
        "               FROM (  SELECT ForumContainerOfPost.forumId, " +
        "                              MessageHasCreatorPerson.messageId, " +
        "                              K.person2Id " +
        "                         FROM PersonKnowsPerson AS K, " +
        "                              ForumHasMemberPerson, " +
        "                              MessageHasCreatorPerson, " +
        "                              ForumContainerOfPost " +
        "                        WHERE K.person1Id = ? " +
        "                          AND ForumHasMemberPerson.personId = K.person2Id " +
        "                          AND ForumHasMemberPerson.joinDate > ? " +
        "                          AND ForumHasMemberPerson.forumId = ForumContainerOfPost.forumId " +
        "                          AND MessageHasCreatorPerson.personId = K.person2Id " +
        "                          AND ForumContainerOfPost.postId = MessageHasCreatorPerson.messageId " +
        "                        UNION " +
        "                       SELECT ForumContainerOfPost.forumId, " +
        "                              MessageHasCreatorPerson.messageId, " +
        "                              K2.person2Id " +
        "                         FROM PersonKnowsPerson AS K1, " +
        "                              PersonKnowsPerson AS K2, " +
        "                              ForumHasMemberPerson, " +
        "                              MessageHasCreatorPerson, " +
        "                              ForumContainerOfPost " +
        "                        WHERE K1.person1Id = ? " +
        "                          AND K2.person1Id = K1.person2Id " +
        "                          AND K2.person2Id <> ? " +
        "                          AND ForumHasMemberPerson.personId = K2.person2Id " +
        "                          AND ForumHasMemberPerson.joinDate > ? " +
        "                          AND ForumHasMemberPerson.forumId = ForumContainerOfPost.forumId " +
        "                          AND MessageHasCreatorPerson.personId = K2.person2Id " +
        "                          AND ForumContainerOfPost.postId = MessageHasCreatorPerson.messageId " +
        "                    ) AS U " +
        "           GROUP BY U.forumId " +
        "           ORDER BY COUNT(*) DESC, " +
        "                    U.forumId LIMIT ? " +
        "          ) AS T, " +
        "          Forum " +
        "    WHERE T.forumId = Forum.id";

    /** A minimal constructor. */
    private Query5() {}

    /**
     * Run LDBC SNB complex read query 5 as a microbenchmark.
     *
     * <p>A configuration file called <tt>params.ini</tt> specifies
     * the running parameters.
     *
     * @param args  Unused
     */
    public static void main(String[] args) {
        Microbenchmark.executeQueryWithParametersFromFile(new Query5(), queryName, queryParameterFilename, queryParameterFileLinePattern);
    }

    /**
     * New groups (fifth complex read query).
     * @param db        A database handle
     * @param personId  The person's unique identifier
     * @param date      The date (number of milliseconds since beginning of epoch)
     * @param limit     The upper bound on the number of results returned
     * @return the top 'limit' forums joined by friends of the given person after the given date
     * @throws SQLException if a database access error occurs
     */
    public static List<LdbcQuery5Result> query(Connection db, long personId, long date, int limit) throws SQLException {

        List<LdbcQuery5Result> results = new ArrayList<>();

        PreparedStatement s = db.prepareStatement(queryString);
        s.setLong(1, personId);
        s.setLong(2, date);
        s.setLong(3, personId);
        s.setLong(4, personId);
        s.setLong(5, date);
        s.setInt(6, queryLimit);
        ResultSet r = s.executeQuery();
        while (r.next()) {
            LdbcQuery5Result result = new LdbcQuery5Result(
                r.getString("Forum.title"),
                r.getInt("T.count"));
            results.add(result);
        }
        r.close();
        s.close();

        return results;
    }

    /**
     * Explain query 5 with the given inputs.
     * @param db        A database handle
     * @param personId  The person's unique identifier
     * @param date      A date (milliseconds since the start of the epoch)
     * @param limit     An upper bound on the number of results returned
     * @return information about the query execution plan
     * @throws SQLException if a database access error occurs
     */
    private static ResultSet explain(Connection db, long personId, long date, int limit) throws SQLException {
        PreparedStatement s = db.prepareStatement(Explanation.query + queryString);
        s.setLong(1, personId);
        s.setLong(2, date);
        s.setLong(3, personId);
        s.setLong(4, personId);
        s.setLong(5, date);
        s.setInt(6, queryLimit);
        return s.executeQuery();
    }

    /**
     * Execute the query once for every query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @param beVerbose        Print query outputs if true
     * @param printHeapUsage   Print heap usage if true
     * @throws SQLException if a database access error occurs
     */
    public void executeQuery(Connection db, QueryParameterFile queryParameters, boolean beVerbose, boolean printHeapUsage) throws SQLException {
        HeapUsage heapUsage = new HeapUsage();

        while (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            long date = queryParameters.getLong();

            if (printHeapUsage)
                heapUsage.print(System.out);

            List<LdbcQuery5Result> results = query(db, personId, date, queryLimit);

            if (beVerbose)
                print(personId, date, results);
       }
    }

    /**
     * Explain the query with the first set of query parameters.
     * @param db               A database handle
     * @param queryParameters  Stream of query input parameters
     * @throws SQLException if a database access error occurs
     */
    public void explainQuery(Connection db, QueryParameterFile queryParameters) throws SQLException {
        if (queryParameters.nextLine()) {
            long personId = queryParameters.getLong();
            long date = queryParameters.getLong();

            ResultSet r = explain(db, personId, date, queryLimit);

            ldbc.utils.Explanation.print(System.out, r);
        }
    }

    /**
     * Pretty print the query 5 results.
     * @param personId  Query 5 parameter 1
     * @param date      Query 5 parameter 2
     * @param results   Query 5 results
     */
    private static void print(long personId, long date, List<LdbcQuery5Result> results) {
        SimpleDateFormat dateTimeFmt = new SimpleDateFormat("EEE MMM dd HH:mm:ss yyyy");
        dateTimeFmt.setTimeZone(TimeZone.getTimeZone("UTC"));
        System.out.println(personId + " " + dateTimeFmt.format(date));

        if (results.size() == 0) {
            System.out.println("  no matches");
            System.out.println("");
            return;
        }

        for (LdbcQuery5Result result : results)
            System.out.println("  " + result.forumTitle()
                               + " " + result.postCount());
        System.out.println("");
    }

}
